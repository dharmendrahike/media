package com.example.dharmendraverma.myapplication.gpuimage;

import android.content.Context;
import android.opengl.GLES20;

import java.nio.IntBuffer;
import java.util.List;


//import jp.co.cyberagent.android.gpuimage.sample.R;

/**
 * Created by sam on 14-8-9.
 */
public class IFBrannanFilterOptimized extends GPUImageFilter {
    private Context mContext;

    private int filterInputTextureUniform2;
    public int filterSourceTexture2 = OpenGlUtils.NO_TEXTURE;

    int mGPUImageWidth = 256;
    int mGPUImageHeight = 1;
    int mGPURGBAUnitSize = 4;

    int[] mArrForNewFilter = {
            0x00, 0x00, 0x39, 0xff, 0x00, 0x00, 0x39, 0xff, 0x00, 0x00, 0x39, 0xff, 0x00, 0x00, 0x39, 0xff, 0x00, 0x00, 0x39, 0xff,
            0x00, 0x00, 0x3a, 0xff, 0x00, 0x00, 0x3a, 0xff, 0x00, 0x00, 0x3a, 0xff, 0x00, 0x00, 0x3a, 0xff, 0x00, 0x00, 0x3a, 0xff,
            0x00, 0x00, 0x3b, 0xff, 0x00, 0x00, 0x3b, 0xff, 0x00, 0x00, 0x3b, 0xff, 0x00, 0x00, 0x3b, 0xff, 0x00, 0x00, 0x3c, 0xff,
            0x00, 0x00, 0x3c, 0xff, 0x00, 0x00, 0x3c, 0xff, 0x00, 0x00, 0x3d, 0xff, 0x00, 0x00, 0x3d, 0xff, 0x00, 0x00, 0x3d, 0xff,
            0x00, 0x00, 0x3d, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x40, 0xff,
            0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x40, 0xff, 0x00, 0x00, 0x41, 0xff,
            0x00, 0x00, 0x41, 0xff, 0x00, 0x00, 0x42, 0xff, 0x00, 0x00, 0x42, 0xff, 0x00, 0x00, 0x43, 0xff, 0x00, 0x00, 0x43, 0xff,
            0x00, 0x00, 0x43, 0xff, 0x00, 0x00, 0x45, 0xff, 0x00, 0x00, 0x45, 0xff, 0x00, 0x00, 0x45, 0xff, 0x00, 0x00, 0x45, 0xff,
            0x00, 0x00, 0x45, 0xff, 0x00, 0x00, 0x47, 0xff, 0x00, 0x05, 0x47, 0xff, 0x00, 0x05, 0x47, 0xff, 0x00, 0x08, 0x4a, 0xff,
            0x00, 0x09, 0x4a, 0xff, 0x00, 0x0a, 0x4a, 0xff, 0x00, 0x0a, 0x4a, 0xff, 0x00, 0x0c, 0x4c, 0xff, 0x00, 0x0d, 0x4c, 0xff,
            0x00, 0x0e, 0x4d, 0xff, 0x00, 0x0f, 0x4d, 0xff, 0x00, 0x0f, 0x4d, 0xff, 0x00, 0x10, 0x4e, 0xff, 0x00, 0x16, 0x4e, 0xff,
            0x00, 0x17, 0x4e, 0xff, 0x00, 0x18, 0x4e, 0xff, 0x00, 0x18, 0x4e, 0xff, 0x00, 0x19, 0x50, 0xff, 0x00, 0x1a, 0x50, 0xff,
            0x00, 0x1d, 0x51, 0xff, 0x00, 0x1d, 0x51, 0xff, 0x00, 0x20, 0x51, 0xff, 0x00, 0x20, 0x51, 0xff, 0x00, 0x22, 0x54, 0xff,
            0x00, 0x24, 0x55, 0xff, 0x00, 0x25, 0x55, 0xff, 0x00, 0x28, 0x56, 0xff, 0x00, 0x29, 0x56, 0xff, 0x00, 0x2c, 0x58, 0xff,
            0x00, 0x2d, 0x59, 0xff, 0x00, 0x2d, 0x59, 0xff, 0x00, 0x2e, 0x59, 0xff, 0x00, 0x2f, 0x59, 0xff, 0x00, 0x30, 0x59, 0xff,
            0x00, 0x32, 0x5a, 0xff, 0x00, 0x35, 0x5c, 0xff, 0x00, 0x38, 0x5f, 0xff, 0x00, 0x39, 0x5f, 0xff, 0x00, 0x3a, 0x5f, 0xff,
            0x00, 0x3c, 0x5f, 0xff, 0x00, 0x3d, 0x60, 0xff, 0x00, 0x3d, 0x60, 0xff, 0x00, 0x3e, 0x61, 0xff, 0x00, 0x40, 0x61, 0xff,
            0x00, 0x41, 0x62, 0xff, 0x00, 0x44, 0x62, 0xff, 0x00, 0x46, 0x63, 0xff, 0x00, 0x47, 0x65, 0xff, 0x00, 0x48, 0x6a, 0xff,
            0x00, 0x4a, 0x6a, 0xff, 0x00, 0x4b, 0x6a, 0xff, 0x00, 0x4c, 0x6a, 0xff, 0x00, 0x4d, 0x6c, 0xff, 0x0b, 0x50, 0x6c, 0xff,
            0x14, 0x51, 0x6d, 0xff, 0x1a, 0x52, 0x6d, 0xff, 0x28, 0x56, 0x6d, 0xff, 0x31, 0x56, 0x6e, 0xff, 0x39, 0x57, 0x6e, 0xff,
            0x3a, 0x57, 0x6e, 0xff, 0x3f, 0x58, 0x71, 0xff, 0x45, 0x59, 0x71, 0xff, 0x49, 0x5c, 0x72, 0xff, 0x4d, 0x5d, 0x74, 0xff,
            0x50, 0x5f, 0x74, 0xff, 0x53, 0x60, 0x74, 0xff, 0x55, 0x63, 0x76, 0xff, 0x57, 0x64, 0x76, 0xff, 0x5e, 0x64, 0x76, 0xff,
            0x5f, 0x65, 0x77, 0xff, 0x61, 0x68, 0x79, 0xff, 0x62, 0x6a, 0x79, 0xff, 0x64, 0x6b, 0x79, 0xff, 0x68, 0x6c, 0x7c, 0xff,
            0x6d, 0x6d, 0x7d, 0xff, 0x6d, 0x6e, 0x7f, 0xff, 0x6e, 0x71, 0x7f, 0xff, 0x70, 0x75, 0x83, 0xff, 0x74, 0x76, 0x83, 0xff,
            0x75, 0x76, 0x83, 0xff, 0x76, 0x77, 0x84, 0xff, 0x78, 0x78, 0x84, 0xff, 0x7a, 0x79, 0x84, 0xff, 0x7d, 0x7a, 0x85, 0xff,
            0x80, 0x7b, 0x85, 0xff, 0x83, 0x7c, 0x88, 0xff, 0x84, 0x83, 0x89, 0xff, 0x87, 0x86, 0x8d, 0xff, 0x88, 0x87, 0x8d, 0xff,
            0x88, 0x87, 0x8d, 0xff, 0x88, 0x89, 0x8d, 0xff, 0x8a, 0x8a, 0x8e, 0xff, 0x8f, 0x8b, 0x8f, 0xff, 0x91, 0x8f, 0x90, 0xff,
            0x92, 0x8f, 0x90, 0xff, 0x93, 0x90, 0x92, 0xff, 0x95, 0x93, 0x94, 0xff, 0x96, 0x94, 0x97, 0xff, 0x96, 0x95, 0x98, 0xff,
            0x96, 0x96, 0x98, 0xff, 0x9f, 0x96, 0x98, 0xff, 0x9f, 0x96, 0x98, 0xff, 0x9f, 0x97, 0x9a, 0xff, 0xa2, 0x98, 0x9a, 0xff,
            0xa2, 0x9c, 0x9d, 0xff, 0xa4, 0xa0, 0x9d, 0xff, 0xa7, 0xa1, 0x9d, 0xff, 0xa7, 0xa2, 0x9d, 0xff, 0xab, 0xa3, 0xa2, 0xff,
            0xab, 0xa7, 0xa2, 0xff, 0xac, 0xa7, 0xa4, 0xff, 0xad, 0xa8, 0xa4, 0xff, 0xad, 0xa8, 0xa5, 0xff, 0xae, 0xa9, 0xa6, 0xff,
            0xb0, 0xad, 0xa7, 0xff, 0xb3, 0xaf, 0xa8, 0xff, 0xb6, 0xb0, 0xa8, 0xff, 0xb6, 0xb3, 0xa9, 0xff, 0xb6, 0xb4, 0xaa, 0xff,
            0xb7, 0xb5, 0xaa, 0xff, 0xb9, 0xb6, 0xae, 0xff, 0xb9, 0xb6, 0xaf, 0xff, 0xba, 0xb8, 0xb0, 0xff, 0xbb, 0xbb, 0xb1, 0xff,
            0xbc, 0xbc, 0xb2, 0xff, 0xbf, 0xbf, 0xb3, 0xff, 0xc0, 0xc0, 0xb4, 0xff, 0xc1, 0xc1, 0xb4, 0xff, 0xc2, 0xc2, 0xb8, 0xff,
            0xc4, 0xc3, 0xba, 0xff, 0xc4, 0xc4, 0xbb, 0xff, 0xc5, 0xc4, 0xbd, 0xff, 0xc5, 0xc5, 0xbd, 0xff, 0xc8, 0xc8, 0xbd, 0xff,
            0xc8, 0xc8, 0xbd, 0xff, 0xcb, 0xcd, 0xc2, 0xff, 0xcd, 0xcd, 0xc3, 0xff, 0xce, 0xce, 0xc3, 0xff, 0xce, 0xce, 0xc4, 0xff,
            0xce, 0xcf, 0xc5, 0xff, 0xcf, 0xd0, 0xc6, 0xff, 0xd1, 0xd4, 0xc9, 0xff, 0xd2, 0xd7, 0xc9, 0xff, 0xd3, 0xd8, 0xc9, 0xff,
            0xd3, 0xd9, 0xc9, 0xff, 0xd4, 0xd9, 0xcd, 0xff, 0xd4, 0xda, 0xcd, 0xff, 0xd7, 0xdd, 0xcf, 0xff, 0xd8, 0xde, 0xcf, 0xff,
            0xd9, 0xdf, 0xd0, 0xff, 0xdb, 0xe3, 0xd1, 0xff, 0xdb, 0xe3, 0xd2, 0xff, 0xdd, 0xe5, 0xd4, 0xff, 0xdd, 0xe7, 0xd4, 0xff,
            0xdd, 0xe8, 0xd9, 0xff, 0xde, 0xe9, 0xda, 0xff, 0xdf, 0xea, 0xdc, 0xff, 0xe3, 0xeb, 0xdc, 0xff, 0xe3, 0xec, 0xdc, 0xff,
            0xe4, 0xf0, 0xdd, 0xff, 0xe5, 0xf0, 0xdd, 0xff, 0xe5, 0xf1, 0xdd, 0xff, 0xe6, 0xf3, 0xdd, 0xff, 0xe7, 0xf4, 0xdd, 0xff,
            0xe9, 0xf5, 0xdd, 0xff, 0xe9, 0xf5, 0xdd, 0xff, 0xea, 0xf6, 0xdd, 0xff, 0xeb, 0xfd, 0xdd, 0xff, 0xeb, 0xfe, 0xdd, 0xff,
            0xec, 0xff, 0xdd, 0xff, 0xec, 0xff, 0xdd, 0xff, 0xef, 0xff, 0xdd, 0xff, 0xf1, 0xff, 0xdd, 0xff, 0xf1, 0xff, 0xdd, 0xff,
            0xf2, 0xff, 0xdd, 0xff, 0xf2, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xdd, 0xff,
            0xf3, 0xff, 0xdd, 0xff
    };

    IntBuffer m_buffer;

    private static final String SHADER =   "\n" +
            " precision highp float;\n" +
            " varying highp vec2 textureCoordinate;\n" +
            " uniform sampler2D inputImageTexture;\n" +
            " uniform sampler2D inputImageTexture2;\n " +

            " uniform highp float touchPos;\n" +
            " \n" +
            " uniform highp float enabledDrawSide;\n"+

            " \n" +
            " void main()\n" +
            " {\n" +
            " vec4 color = texture2D(inputImageTexture, textureCoordinate);\n" +
            " if(color.a == 0.0)\n" +
            "              {\n" +
            "                  gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n" +
            "                  return;\n" +
            "              }"+
            "  if (enabledDrawSide != -1.0 && touchPos > 0.0 && touchPos < 1.0) {\n" +
            "                           if (enabledDrawSide == 0.0) {\n" +
            "                               if (textureCoordinate.x > touchPos) {\n" +
            "                                   gl_FragColor = color;\n" +
            "                                   return;\n" +
            "                               }\n" +
            "                           } else {\n" +
            "                               if (textureCoordinate.x < touchPos) {\n" +
            "                                   gl_FragColor = color;\n" +
            "                                   return;\n" +
            "                               }\n" +
            "                           }\n" +
            "                       }"+

            " float fratio = distance(textureCoordinate, vec2(0.5, 0.5));\n" +
            " fratio = 1.75 * fratio * fratio;\n" +
            " fratio = 1.0 - fratio;\n" +
            " float r = texture2D(inputImageTexture2, vec2(color.r, 1)).r;\n" +
            " float g = texture2D(inputImageTexture2, vec2(color.g, 1)).g;\n" +
            " float b = texture2D(inputImageTexture2, vec2(color.b, 1)).b;\n" +
            " vec3 new_color = vec3(r, g, b) * fratio;\n" +
            " gl_FragColor = vec4(new_color, 1.0);\n" +
            " }\n";

    private static final String SHADER_OES =   "\n" +
            "#extension GL_OES_EGL_image_external : require\n" +
            "precision mediump float;\n" +
            "uniform lowp samplerExternalOES inputImageTexture;\n" +
            " uniform sampler2D inputImageTexture2;\n " +

            " uniform highp float touchPos;\n" +
            " \n" +
            " uniform highp float enabledDrawSide;\n"+

            " \n" +
            " void main()\n" +
            " {\n" +
            " vec4 color = texture2D(inputImageTexture, textureCoordinate);\n" +
            " if(color.a == 0.0)\n" +
            "              {\n" +
            "                  gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n" +
            "                  return;\n" +
            "              }"+
            "  if (enabledDrawSide != -1.0 && touchPos > 0.0 && touchPos < 1.0) {\n" +
            "                           if (enabledDrawSide == 0.0) {\n" +
            "                               if (textureCoordinate.x > touchPos) {\n" +
            "                                   gl_FragColor = color;\n" +
            "                                   return;\n" +
            "                               }\n" +
            "                           } else {\n" +
            "                               if (textureCoordinate.x < touchPos) {\n" +
            "                                   gl_FragColor = color;\n" +
            "                                   return;\n" +
            "                               }\n" +
            "                           }\n" +
            "                       }"+

            " float fratio = distance(textureCoordinate, vec2(0.5, 0.5));\n" +
            " fratio = 1.75 * fratio * fratio;\n" +
            " fratio = 1.0 - fratio;\n" +
            " float r = texture2D(inputImageTexture2, vec2(color.r, 1)).r;\n" +
            " float g = texture2D(inputImageTexture2, vec2(color.g, 1)).g;\n" +
            " float b = texture2D(inputImageTexture2, vec2(color.b, 1)).b;\n" +
            " vec3 new_color = vec3(r, g, b) * fratio;\n" +
            " gl_FragColor = vec4(new_color, 1.0);\n" +
            " }\n";

    private int m_sizeOfBuffer;

    private List<Integer> mResIds;

    private int[] test;


    public IFBrannanFilterOptimized(Context context) {
        super(NO_FILTER_VERTEX_SHADER, SHADER_OES);
        mContext = context;

        //Set the buffer from which texture needs to be created.
        //Buffer.createIntBuffer(mArrForNewFilter);
        test = new int[mGPUImageWidth];
        int i = 0;
        int k = 0;
        while(i<mGPUImageWidth * mGPURGBAUnitSize)
        {
            int r = mArrForNewFilter[i];//(mArrForNewFilter[i] & 0xff000000) >> 24;
            ++i;

            int g = mArrForNewFilter[i];//(mArrForNewFilter[i] & 0xff0000) >> 16;
            ++i;

            int b = mArrForNewFilter[i];//(mArrForNewFilter[i] & 0xff00) >> 8;
            ++i;

            int a = mArrForNewFilter[i];//(mArrForNewFilter[i] & 0xff);
            ++i;
            test[k] = a << 24 | b << 16 | g << 8 | r;
            ++k;
        }

        m_buffer = IntBuffer.allocate(mGPUImageWidth);
        m_buffer.put(test);
        m_buffer.position(0);

        m_sizeOfBuffer = mArrForNewFilter.length;
    }

    public void onInit() {
        super.onInit();
        filterInputTextureUniform2 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture2");
        initInputTexture();
    }

    protected void onDrawArraysPre() {
        super.onDrawArraysPre();
        if (filterSourceTexture2 != OpenGlUtils.NO_TEXTURE) {
            GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture2);
            GLES20.glUniform1i(filterInputTextureUniform2, 3);
        }
    }

    public void initInputTexture() {
         runOnDraw(new Runnable() {
            @Override
            public void run() {
                //Check the size of array.
                filterSourceTexture2 = OpenGlUtils.loadTexture(m_buffer,mGPUImageWidth,mGPUImageHeight, OpenGlUtils.NO_TEXTURE);
                GLES20.glGetError();
            }
        });
    }
}
